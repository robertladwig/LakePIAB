nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
## HEATMAP OF WATER TEMPERATURE WITH THERMOCLINE DEPTH AND ICE THICKNESS
g <- ggplot(m.df, aes((time), dx*as.numeric(as.character(variable)))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-1,30),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Temp [degC]')+
geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse()
plot(df.ice$snow_h)
debugSource("~/Projects/LakeModelR/R/run_thermalmodel.R", echo=TRUE)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 60 *24 * 3600 # seconds 14 2 * 365
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
dHs
Hs
daily_meteo["Tair",n]
meltP * dt * (((1 - IceSnowAttCoeff) * daily_meteo["Jsw",n])+(longwave(cc = daily_meteo["CC",n], sigma = sigma, Tair = daily_meteo["Tair",n], ea = daily_meteo["ea",n], emissivity = emissivity, Jlw = daily_meteo["Jlw",n]) +
backscattering(emissivity = emissivity, sigma = sigma, Twater = un[1], eps = eps) +
latent(Tair = daily_meteo["Tair",n], Twater = un[1], Uw = daily_meteo["Uw",n], p2 = p2, pa = daily_meteo["Pa",n], ea=daily_meteo["ea",n],  RH = daily_meteo["RH",n], A = area, Cd = Cd) +
sensible(Tair = daily_meteo["Tair",n], Twater = un[1], Uw = daily_meteo["Uw",n], p2 = p2, pa = daily_meteo["Pa",n], ea=daily_meteo["ea",n], RH = daily_meteo["RH",n], A = area, Cd = Cd)) )/(rho_fw*L_ice)
daily_meteo["Jsw",n]
rho_fw*L_ice
plot(df.ice$snowice_h)
plot(df.ice$snow_h)
plot(df.ice$snowice_h)
source("~/Projects/LakeModelR/R/run_thermalmodel.R", echo=TRUE)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 60 *24 * 3600 # seconds 14 2 * 365
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
debugSource("~/Projects/LakeModelR/R/run_thermalmodel.R", echo=TRUE)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 365 *24 * 3600 # seconds 14 2 * 365
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
print(y[1,])
print(y[2,])
print(y[3:7,])
print(y)
print(mn)
solve(y, mn)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 365 *24 * 3600 # seconds 14 2 * 365
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
print(kz)
debugSource("~/Projects/LakeModelR/R/run_thermalmodel.R", echo=TRUE)
#' Modular compositional learing project -
#' Postdoc in a Box (MCL PIAB)
#' Long-term Mendota data were obtained from North Temperate Lakes Long Term
#' Ecological Research program (#DEB-1440297)
#' @author: Robert Ladwig
#' @email: ladwigjena@gmail.com
## CLEAN WORKSPACE
rm(list = ls())
# SET WD TO CURRENT DIR
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## INSTALL PACKAGE
# install.packages("remotes")
# require(remotes)
# remotes::install_github("robertladwig/LakeModelR")
## LOAD PACKAGE(S)
library(LakeModelR)
require(tidyverse)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 365 *24 * 3600 # seconds 14 2 * 365
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
## HEATMAP OF WATER TEMPERATURE WITH THERMOCLINE DEPTH AND ICE THICKNESS
g <- ggplot(m.df, aes((time), dx*as.numeric(as.character(variable)))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-1,30),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Temp [degC]')+
geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse()
plot(temp[5,])
plot(temp[10,])
plot(temp[20,])
plot(temp[25,])
plot(temp[24,])
plot(temp[18,])
plot(temp[10,])
plot(temp[14,])
g
