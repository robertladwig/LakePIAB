}
#### NUMERICAL 4TH ORDER RUNGE KUTTA SOLUTION
c1rk = rep(NA, length(t))
c2rk = rep(NA, length(t))
c1rk[1] = c10
c2rk[1] = c20
for (i in t[2:length(t)]){
k1 = dc1dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
l1 = dc2dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
k2 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
l2 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
k3 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
l3 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
k4 = dc1dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
l4 = dc2dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
c1rk[match(i, t)] = c1rk[match(i, t) -1] +
dt * (1/6 * (k1 + 2 * k2 + 2 * k3 + k4))
c2rk[match(i, t)] = c2rk[match(i, t) -1] +
dt * (1/6 * (l1 + 2 * l2 + 2 * l3 + l4))
}
#### NUMERICAL EXPLICIT FORWARD EULER PATANKAR SOLUTION
c1pteuler = rep(NA, length(t))
c2pteuler = rep(NA, length(t))
c1pteuler[1] = c10
c2pteuler[1] = c20
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c1pteuler[match(i, t) -1]
p2 = a * c1pteuler[match(i, t) -1]
d1 = p2
d2 = p1
c1pteuler[match(i, t)] = (c1pteuler[match(i, t) -1] + dt * p1) /
(1 + dt * d1 / c1pteuler[match(i, t) -1])
c2pteuler[match(i, t)] = (c2pteuler[match(i, t) -1] + dt * p2) /
(1 + dt * d2 / c2pteuler[match(i, t) -1])
c2pteuler[match(i, t)]  = c10 + c20 - c1pteuler[match(i, t)]
}
#### PLOTTING OF RESULTS
plot(t, c1, type = 'l', col = 'blue', ylim = c(-0.3, 1.3), xlab = 'time',
ylab = 'conc.')
lines(t, c1euler, type = 'l', col = 'blue', lty = 'dashed')
lines(t, c1rk, type = 'l', col = 'blue', lty = 'dotted')
lines(t, c1pteuler, type = 'l', col = 'blue', lty = 'dotdash')
lines(t, c2, col = 'red')
lines(t, c2euler, type = 'l', col = 'red', lty = 'dashed')
lines(t, c2rk, type = 'l', col = 'red', lty = 'dotted')
lines(t, c2pteuler, type = 'l', col = 'red', lty = 'dotdash')
legend(2., 1.1, legend=c("Analytical", "Explicit Euler", "Runge-Kutta 4th",
"Euler-Patankar"),
lty = c("solid","dashed","dotted",'dotdash')
)
# Burchard et al. (2003) "A high-order conservative Patankar-type discretisation
# for stiff systems of production–destruction equations
#### PROBLEM SET, TWO COUPLED ODES
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
dc1dt <- function(c1, c2, a){
return(c2 - a * c1)
}
dc2dt <- function(c1, c2, a){
return(a * c1 - c2)
}
#### PARAMETERS
a = 5
c10 = 0.9
c20 = 0.1
c1inf = (c10 + c20) / (a + 1)
dt = 0.3
t = seq(0, 4, dt)
c = c10/c1inf - 1
#### ANALYTICAL SOLUTION
c1 = (1 + c *  exp(-(a+1)* t)) * c1inf
c2 = c10 + c20 - c1
#### NUMERICAL EXPLICIT FORWARD EULER SOLUTION
c1euler = rep(NA, length(t))
c2euler = rep(NA, length(t))
c1euler[1] = c10
c2euler[1] = c20
for (i in t[2:length(t)]){
c1euler[match(i, t)] = c1euler[match(i, t) -1] +
dt * (c2euler[match(i, t) -1] - c1euler[match(i, t) -1] * a)
c2euler[match(i, t)] = c2euler[match(i, t) -1] +
dt * (a * c1euler[match(i, t) -1] - c2euler[match(i, t) -1])
}
#### NUMERICAL 4TH ORDER RUNGE KUTTA SOLUTION
c1rk = rep(NA, length(t))
c2rk = rep(NA, length(t))
c1rk[1] = c10
c2rk[1] = c20
for (i in t[2:length(t)]){
k1 = dc1dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
l1 = dc2dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
k2 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
l2 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
k3 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
l3 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
k4 = dc1dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
l4 = dc2dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
c1rk[match(i, t)] = c1rk[match(i, t) -1] +
dt * (1/6 * (k1 + 2 * k2 + 2 * k3 + k4))
c2rk[match(i, t)] = c2rk[match(i, t) -1] +
dt * (1/6 * (l1 + 2 * l2 + 2 * l3 + l4))
}
#### NUMERICAL EXPLICIT FORWARD EULER PATANKAR SOLUTION
c1pteuler = rep(NA, length(t))
c2pteuler = rep(NA, length(t))
c1pteuler[1] = c10
c2pteuler[1] = c20
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c1pteuler[match(i, t) -1]
p2 = a * c1pteuler[match(i, t) -1]
d1 = p2
d2 = p1
p = sum(p1,p2)
d = sum(d1,d2)
c1pteuler[match(i, t)] = (c1pteuler[match(i, t) -1] + dt * p) /
(1 + dt * d / c1pteuler[match(i, t) -1])
c2pteuler[match(i, t)] = (c2pteuler[match(i, t) -1] + dt * p2) /
(1 + dt * d2 / c2pteuler[match(i, t) -1])
c2pteuler[match(i, t)]  = c10 + c20 - c1pteuler[match(i, t)]
}
#### PLOTTING OF RESULTS
plot(t, c1, type = 'l', col = 'blue', ylim = c(-0.3, 1.3), xlab = 'time',
ylab = 'conc.')
lines(t, c1euler, type = 'l', col = 'blue', lty = 'dashed')
lines(t, c1rk, type = 'l', col = 'blue', lty = 'dotted')
lines(t, c1pteuler, type = 'l', col = 'blue', lty = 'dotdash')
lines(t, c2, col = 'red')
lines(t, c2euler, type = 'l', col = 'red', lty = 'dashed')
lines(t, c2rk, type = 'l', col = 'red', lty = 'dotted')
lines(t, c2pteuler, type = 'l', col = 'red', lty = 'dotdash')
legend(2., 1.1, legend=c("Analytical", "Explicit Euler", "Runge-Kutta 4th",
"Euler-Patankar"),
lty = c("solid","dashed","dotted",'dotdash')
)
# Burchard et al. (2003) "A high-order conservative Patankar-type discretisation
# for stiff systems of production–destruction equations
#### PROBLEM SET, TWO COUPLED ODES
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
dc1dt <- function(c1, c2, a){
return(c2 - a * c1)
}
dc2dt <- function(c1, c2, a){
return(a * c1 - c2)
}
#### PARAMETERS
a = 5
c10 = 0.9
c20 = 0.1
c1inf = (c10 + c20) / (a + 1)
dt = 0.3
t = seq(0, 4, dt)
c = c10/c1inf - 1
#### ANALYTICAL SOLUTION
c1 = (1 + c *  exp(-(a+1)* t)) * c1inf
c2 = c10 + c20 - c1
#### NUMERICAL EXPLICIT FORWARD EULER SOLUTION
c1euler = rep(NA, length(t))
c2euler = rep(NA, length(t))
c1euler[1] = c10
c2euler[1] = c20
for (i in t[2:length(t)]){
c1euler[match(i, t)] = c1euler[match(i, t) -1] +
dt * (c2euler[match(i, t) -1] - c1euler[match(i, t) -1] * a)
c2euler[match(i, t)] = c2euler[match(i, t) -1] +
dt * (a * c1euler[match(i, t) -1] - c2euler[match(i, t) -1])
}
#### NUMERICAL 4TH ORDER RUNGE KUTTA SOLUTION
c1rk = rep(NA, length(t))
c2rk = rep(NA, length(t))
c1rk[1] = c10
c2rk[1] = c20
for (i in t[2:length(t)]){
k1 = dc1dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
l1 = dc2dt(c1rk[match(i, t) -1], c2rk[match(i, t) -1], a)
k2 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
l2 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k1, c2rk[match(i, t) -1] + 1/2 * dt * l1, a)
k3 = dc1dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
l3 = dc2dt(c1rk[match(i, t) -1] + 1/2 * dt * k2, c2rk[match(i, t) -1] + 1/2 * dt * l2, a)
k4 = dc1dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
l4 = dc2dt(c1rk[match(i, t) -1] + dt * k3, c2rk[match(i, t) -1] + dt * l3, a)
c1rk[match(i, t)] = c1rk[match(i, t) -1] +
dt * (1/6 * (k1 + 2 * k2 + 2 * k3 + k4))
c2rk[match(i, t)] = c2rk[match(i, t) -1] +
dt * (1/6 * (l1 + 2 * l2 + 2 * l3 + l4))
}
#### NUMERICAL EXPLICIT FORWARD EULER PATANKAR SOLUTION
c1pteuler = rep(NA, length(t))
c2pteuler = rep(NA, length(t))
c1pteuler[1] = c10
c2pteuler[1] = c20
for (i in t[2:length(t)]){
# dc1/dt = c2 - a c1
# dc2/dt = a c1 - c2
p1 = c1pteuler[match(i, t) -1]
p2 = a * c1pteuler[match(i, t) -1]
d1 = p2
d2 = p1
p = sum(p1,p2)
d = sum(d1,d2)
c1pteuler[match(i, t)] = (c1pteuler[match(i, t) -1] + dt * p1) /
(1 + dt * d1 / c1pteuler[match(i, t) -1])
c2pteuler[match(i, t)] = (c2pteuler[match(i, t) -1] + dt * p2) /
(1 + dt * d2 / c2pteuler[match(i, t) -1])
c2pteuler[match(i, t)]  = c10 + c20 - c1pteuler[match(i, t)]
}
#### PLOTTING OF RESULTS
plot(t, c1, type = 'l', col = 'blue', ylim = c(-0.3, 1.3), xlab = 'time',
ylab = 'conc.')
lines(t, c1euler, type = 'l', col = 'blue', lty = 'dashed')
lines(t, c1rk, type = 'l', col = 'blue', lty = 'dotted')
lines(t, c1pteuler, type = 'l', col = 'blue', lty = 'dotdash')
lines(t, c2, col = 'red')
lines(t, c2euler, type = 'l', col = 'red', lty = 'dashed')
lines(t, c2rk, type = 'l', col = 'red', lty = 'dotted')
lines(t, c2pteuler, type = 'l', col = 'red', lty = 'dotdash')
legend(2., 1.1, legend=c("Analytical", "Explicit Euler", "Runge-Kutta 4th",
"Euler-Patankar"),
lty = c("solid","dashed","dotted",'dotdash')
)
ice=FALSE
if (ice)
print)'ha'
if (ice)
print('ha')
if (!ice)
print('ha')
300/12
25*27
10*27+10*24+10*36
#' Modular compositional learing project -
#' Postdoc in a Box (MCL PIAB)
#' Long-term Mendota data were obtained from North Temperate Lakes Long Term
#' Ecological Research program (#DEB-1440297)
#' @author: Robert Ladwig
#' @email: ladwigjena@gmail.com
## CLEAN WORKSPACE
rm(list = ls())
# SET WD TO CURRENT DIR
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## INSTALL PACKAGE
# install.packages("remotes")
# require(remotes)
# remotes::install_github("robertladwig/LakeModelR")
## LOAD PACKAGE(S)
library(LakeModelR)
require(tidyverse)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 14 * 365 *24 * 3600 # seconds
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
## HEATMAP OF WATER TEMPERATURE WITH THERMOCLINE DEPTH AND ICE THICKNESS
g <- ggplot(m.df, aes((time), dx*as.numeric(as.character(variable)))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-1,30),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Temp [degC]')+
geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse()
plot(df.ice$ice_h)
plot(df.ice$snow_h)
plot(df.ice$snowice_h)
plot(df.ice$ice_h)
plot(df.ice$snow_h)
plot(df.ice$snowice_h)
plot(df.ice$snow_h)
#' Modular compositional learing project -
#' Postdoc in a Box (MCL PIAB)
#' Long-term Mendota data were obtained from North Temperate Lakes Long Term
#' Ecological Research program (#DEB-1440297)
#' @author: Robert Ladwig
#' @email: ladwigjena@gmail.com
## CLEAN WORKSPACE
rm(list = ls())
# SET WD TO CURRENT DIR
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
## INSTALL PACKAGE
# install.packages("remotes")
# require(remotes)
# remotes::install_github("robertladwig/LakeModelR")
## LOAD PACKAGE(S)
library(LakeModelR)
require(tidyverse)
## GENERAL LAKE CONFIGURATION
zmax = 25 # maximum lake depth
nx = 25 # number of layers we want to have
dt = 3600  # temporal step (here, one hour because it fits boundary data)
dx = zmax/nx # spatial step
## HYPSOGRAPHY OF THE LAKE
hyps_all <- get_hypsography(hypsofile = '../input/bathymetry.csv',
dx = dx,
nx = nx)
## ATMOSPHERIC BOUNDARY CONDITIONS
cut_meteo <- read_csv('../input/Mendota_1980_2019_box_5_CT.csv')
years <- lubridate::year(cut_meteo$datetime)
cut_meteo <- cut_meteo[which(years >= 2006), ]
write.csv(x = cut_meteo, file = '../input/Mendota_2002.csv', row.names = FALSE)
meteo_all <- provide_meteorology(meteofile = '../input/Mendota_2002.csv',
secchifile = NULL)
### TIME INFORMATION
startingDate <- meteo_all[[1]]$datetime[1]
startTime = 1
endTime = 2 * 365 *24 * 3600 # seconds 14
total_runtime = endTime / 24 / 3600 # days
# INTERPOLATE ATMOSPHERIC BOUNDARY CONDITIONS
meteo = get_interp_drivers(meteo_all = meteo_all,
total_runtime = total_runtime,
dt = dt,
method = "integrate",
secchi = F)
## DEFINE INITIAL WATER TEMPERATURE FROM OBSERVED DATA
u_ini <- initial_profile(initfile = system.file('extdata', 'observedTemp.txt',
package = 'LakeModelR'),
nx = nx, dx = dx,
depth = hyps_all[[2]],
processed_meteo = meteo_all[[1]])
## RUN THE LAKE MODEL
res <-  run_thermalmodel(u = u_ini,
startTime = startTime,
endTime =  endTime,
ice = FALSE,
Hi = 0,
iceT = 6,
supercooled = 0,
kd_light = 0.8,
sw_factor = 1.0,
zmax = zmax,
nx = nx,
dt = dt,
dx = dx,
area = hyps_all[[1]], # area
depth = hyps_all[[2]], # depth
volume = hyps_all[[3]], # volume
daily_meteo = meteo,
Cd = 0.0013,
scheme = 'implicit',
pgdl_mode = TRUE)
## SAVE THE RESULTS
temp = res$temp
mixing = res$mixing
ice = res$icethickness
snow = res$snowthickness
snowice = res$snowicethickness
avgtemp = res$average
temp_initial = res$temp_initial
temp_heat =  res$temp_heat
temp_diff =  res$temp_diff
temp_mix =  res$temp_mix
temp_conv=  res$temp_conv
temp_ice =  res$temp_ice
meteo_output =  res$meteo_input
buoyancy = res$buoyancy_pgdl
diff = res$diff
## POST-PROCESSING OF THE RESULTS
time =  startingDate + seq(1, ncol(temp), 1) * dt
# time =  as.POSIXct('2002-01-01 00:00:00', tz = 'CDT') + seq(1, ncol(temp), 1) * dt
avgtemp = as.data.frame(avgtemp)
colnames(avgtemp) = c('time', 'epi', 'hyp', 'tot', 'stratFlag', 'thermoclineDep')
avgtemp$time = time
## CREATE DATAFRAME FOR FULL TEMPERATURE PROFILES
df <- data.frame(cbind(time, t(temp)) )
colnames(df) <- c("time", as.character(paste0(seq(1,nrow(temp)))))
m.df <- reshape2::melt(df, "time")
m.df$time <- time
## CREATE DATAFRAME FOR ICE
df.ice = data.frame('time' = time,
'ice_h' = ice,
'snow_h' = snow,
'snowice_h' = snowice)
## HEATMAP OF WATER TEMPERATURE WITH THERMOCLINE DEPTH AND ICE THICKNESS
g <- ggplot(m.df, aes((time), dx*as.numeric(as.character(variable)))) +
geom_raster(aes(fill = as.numeric(value)), interpolate = TRUE) +
scale_fill_gradientn(limits = c(-1,30),
colours = rev(RColorBrewer::brewer.pal(11, 'Spectral')))+
theme_minimal()  +xlab('Time') +
ylab('Depth [m]') +
labs(fill = 'Temp [degC]')+
geom_line(data = avgtemp, aes(time, thermoclineDep, col = 'thermocline depth'), linetype = 'dashed', col = 'brown') +
geom_line(data = df.ice, aes(time, ice_h * (-1), col = 'ice thickness'), linetype = 'solid', col = 'darkblue') +
scale_y_reverse()
plot(df.ice$snow_h)
df <- data.frame(cbind(time, t(meteo_output)) )
plot(df$time, df$V2)
plot(df$time, df$V2, xlim=0:60*86400)
plot(df$time, df$V2, xlim=c(0:60*86400))
plot(df$time, df$V2, xlim=c(0,60*86400))
plot(df$time, df$V2, xlim=c(time[1],time[60*86400]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[60*86400]))
df$time[1]
head(df)
df$time[60*86400]
plot(df$time, df$V2, xlim=c(df$time[1],df$time[60]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[1000]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[10000]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[5000]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[8000]))
plot(df$time, df$V2, xlim=c(df$time[1],df$time[5000]))
df = meteo[[1]]
head(df)
daily_meteo = meteo
head(daily_meteo)
df=meteo_all[[1]]
df
plot(df$Precipitation_millimeterPerDay)
plot(df$Precipitation_millimeterPerDay,xlim=c(0,90))
plot(df$Precipitation_millimeterPerDay,xlim=c(0,900))
plot(df$Precipitation_millimeterPerDay,xlim=c(0,9000))
plot(df$Precipitation_millimeterPerDay,xlim=c(0,90000))
plot(df$Precipitation_millimeterPerDay,xlim=c(0,9000))
meteo
plot(meteo['PP',1])
plot(meteo['PP',1:1e6])
plot(meteo['PP',1:1e3])
plot(meteo['PP',1:1e5])
plot(meteo['PP',1:1e4])
meteo_all
df = meteo_all
df = meteo_all[[1]]
df
plot(df$Precipitation_millimeterPerDay)
plot(df$Precipitation_millimeterPerDay, xlim=c(1,10000))
plot(df$Precipitation_millimeterPerDay, xlim=c(1,100))
mean(df$Precipitation_millimeterPerDay)
